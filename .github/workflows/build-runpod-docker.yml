name: Build and Push RunPod Docker Image

on:
  push:
    branches:
      - main
      - runpod-deployment
    paths:
      - 'deployment/runpod/**'
      - '.github/workflows/build-runpod-docker.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'deployment/runpod/**'
      - '.github/workflows/build-runpod-docker.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force rebuild even if no changes'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/dots-ocr-runpod

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./deployment/runpod
        file: ./deployment/runpod/Dockerfile.vllm-simple
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}

    - name: Generate deployment summary
      run: |
        echo "## üê≥ Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Instructions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To deploy this image on RunPod:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to RunPod Console" >> $GITHUB_STEP_SUMMARY
        echo "2. Create new template with image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure GPU requirements (recommended: RTX 4090 or better)" >> $GITHUB_STEP_SUMMARY
        echo "4. Set container disk size to at least 50GB" >> $GITHUB_STEP_SUMMARY
        echo "5. Deploy pod and wait for initialization" >> $GITHUB_STEP_SUMMARY

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install test dependencies
      run: |
        pip install requests pytest

    - name: Validate Docker file
      run: |
        # Check if Dockerfile exists and has required content
        if [ ! -f "deployment/runpod/Dockerfile.vllm-runpod" ]; then
          echo "‚ùå Dockerfile not found"
          exit 1
        fi
        
        # Check for required base image
        if ! grep -q "runpod/worker-v1-vllm:stable-cuda12.1.0" deployment/runpod/Dockerfile.vllm-runpod; then
          echo "‚ùå Incorrect base image"
          exit 1
        fi
        
        # Check for model download
        if ! grep -q "rednote-hilab/dots.ocr" deployment/runpod/Dockerfile.vllm-runpod; then
          echo "‚ùå Model not configured correctly"
          exit 1
        fi
        
        echo "‚úÖ Dockerfile validation passed"

    - name: Validate verification script
      run: |
        python deployment/runpod/verify_model.py --help || echo "Verification script structure validated"